OAuthServer | [Given|*] I have fixtures loaded from :folder
            | at `FeatureContext::loadFixtures()`

OAuthServer | [Given|*] I load all fixtures
            | at `FeatureContext::loadAllFixtures()`

OAuthServer | [Given|*] /^(?:|I )generate client with:$/
            | generate client with params
            | Example: Given I generate client with:
            | | name | Store |
            | | redirectUri | http://majdi.com:8085/ |
            | | grantTupe | token |
            | at `FeatureContext::iGenerateClientWith()`

OAuthServer | [When|*] I try authenticate in :arg1
            | at `FeatureContext::iTryAuthenticateIn()`

OAuthServer | [When|*] /^(?:|I )(follow|press) the "(?P<name>[^"]*)" (?P<element>[^"]*)$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::clickElement()`

OAuthServer | [When|*] /^(?:|I )(follow|press) the first "(?P<name>[^"]*)" (?P<element>[^"]*)$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::clickElement()`

OAuthServer | [When|*] /^(?:|I )(follow|press) the (?P<nbr>\d*)(st|nd|rd|th) "(?P<name>[^"]*)" (?P<element>[^"]*)$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::clickElement()`

OAuthServer | [When|*] /^(?:|I )(?P<state>check|uncheck) the "(?P<name>[^"]*)" checkbox$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::checkCheckbox()`

OAuthServer | [When|*] /^(?:|I )(?P<state>check|uncheck) the first "(?P<name>[^"]*)" checkbox$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::checkCheckbox()`

OAuthServer | [When|*] /^(?:|I )(?P<state>check|uncheck) the (?P<nbr>\d*)(st|nd|rd|th) "(?P<name>[^"]*)" checkbox$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::checkCheckbox()`

OAuthServer | [When|*] /^(?:|I )check the "(?P<name>[^"]*)" radio$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::checkRadio()`

OAuthServer | [When|*] /^(?:|I )check the first "(?P<name>[^"]*)" radio$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::checkRadio()`

OAuthServer | [When|*] /^(?:|I )check the (?P<nbr>\d*)(st|nd|rd|th) "(?P<name>[^"]*)" radio$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::checkRadio()`

OAuthServer | [Then|*] /^(?:|I )should(?P<should>| not) see (?P<nbr>\d*) "(?P<name>[^"]*)" (?P<element>link|button|radio|checkbox)$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::nbrElement()`

OAuthServer | [Then|*] /^(?:|I )should(?P<should>| not) see a "(?P<name>[^"]*)" (?P<element>link|button|radio|checkbox)$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::seeElement()`

OAuthServer | [When|*] /^(?:|I )(follow|press) the last "(?P<name>[^"]*)" (?P<element>[^"]*)$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::clicklastElement()`

OAuthServer | [When|*] /^(?:|I )follow the link containing "(?P<link>(?:[^"]|\\")*)"$/
            | at `Knp\FriendlyContexts\Context\MinkContext::clickLinkContaining()`

OAuthServer | [When|*] /^(?:|I )follow "(?P<link>(?:[^"]|\\")*)"$/
            | Clicks link with specified id|title|alt|text
            | Example: When I follow "Log In"
            | Example: And I follow "Log In"
            | at `Knp\FriendlyContexts\Context\MinkContext::clickLink()`

OAuthServer | [When|*] /^(?:|I )fill in the first "(?P<field>(?:[^"]|\\")*)" field with "(?P<value>(?:[^"]|\\")*)"$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::fillTheNthField()`

OAuthServer | [When|*] /^(?:|I )fill in the (?P<nbr>\d*)(st|nd|rd|th) "(?P<field>(?:[^"]|\\")*)" field with "(?P<value>(?:[^"]|\\")*)"$/
            | **/
            | at `Knp\FriendlyContexts\Context\MinkContext::fillTheNthField()`

OAuthServer | [Given|*] /^(?:|I )am on (?:|the )homepage$/
            | Opens homepage
            | Example: Given I am on "/"
            | Example: When I go to "/"
            | Example: And I go to "/"
            | at `Knp\FriendlyContexts\Context\MinkContext::iAmOnHomepage()`

OAuthServer | [When|*] /^(?:|I )go to (?:|the )homepage$/
            | Opens homepage
            | Example: Given I am on "/"
            | Example: When I go to "/"
            | Example: And I go to "/"
            | at `Knp\FriendlyContexts\Context\MinkContext::iAmOnHomepage()`

OAuthServer | [Given|*] /^(?:|I )am on "(?P<page>[^"]+)"$/
            | Opens specified page
            | Example: Given I am on "http://batman.com"
            | Example: And I am on "/articles/isBatmanBruceWayne"
            | Example: When I go to "/articles/isBatmanBruceWayne"
            | at `Knp\FriendlyContexts\Context\MinkContext::visit()`

OAuthServer | [When|*] /^(?:|I )go to "(?P<page>[^"]+)"$/
            | Opens specified page
            | Example: Given I am on "http://batman.com"
            | Example: And I am on "/articles/isBatmanBruceWayne"
            | Example: When I go to "/articles/isBatmanBruceWayne"
            | at `Knp\FriendlyContexts\Context\MinkContext::visit()`

OAuthServer | [When|*] /^(?:|I )reload the page$/
            | Reloads current page
            | Example: When I reload the page
            | Example: And I reload the page
            | at `Knp\FriendlyContexts\Context\MinkContext::reload()`

OAuthServer | [When|*] /^(?:|I )move backward one page$/
            | Moves backward one page in history
            | Example: When I move backward one page
            | at `Knp\FriendlyContexts\Context\MinkContext::back()`

OAuthServer | [When|*] /^(?:|I )move forward one page$/
            | Moves forward one page in history
            | Example: And I move forward one page
            | at `Knp\FriendlyContexts\Context\MinkContext::forward()`

OAuthServer | [When|*] /^(?:|I )press "(?P<button>(?:[^"]|\\")*)"$/
            | Presses button with specified id|name|title|alt|value
            | Example: When I press "Log In"
            | Example: And I press "Log In"
            | at `Knp\FriendlyContexts\Context\MinkContext::pressButton()`

OAuthServer | [When|*] /^(?:|I )fill in "(?P<field>(?:[^"]|\\")*)" with "(?P<value>(?:[^"]|\\")*)"$/
            | Fills in form field with specified id|name|label|value
            | Example: When I fill in "username" with: "bwayne"
            | Example: And I fill in "bwayne" for "username"
            | at `Knp\FriendlyContexts\Context\MinkContext::fillField()`

OAuthServer | [When|*] /^(?:|I )fill in "(?P<field>(?:[^"]|\\")*)" with:$/
            | Fills in form field with specified id|name|label|value
            | Example: When I fill in "username" with: "bwayne"
            | Example: And I fill in "bwayne" for "username"
            | at `Knp\FriendlyContexts\Context\MinkContext::fillField()`

OAuthServer | [When|*] /^(?:|I )fill in "(?P<value>(?:[^"]|\\")*)" for "(?P<field>(?:[^"]|\\")*)"$/
            | Fills in form field with specified id|name|label|value
            | Example: When I fill in "username" with: "bwayne"
            | Example: And I fill in "bwayne" for "username"
            | at `Knp\FriendlyContexts\Context\MinkContext::fillField()`

OAuthServer | [When|*] /^(?:|I )fill in the following:$/
            | Fills in form fields with provided table
            | Example: When I fill in the following"
            |              | username | bruceWayne |
            |              | password | iLoveBats123 |
            | Example: And I fill in the following"
            |              | username | bruceWayne |
            |              | password | iLoveBats123 |
            | at `Knp\FriendlyContexts\Context\MinkContext::fillFields()`

OAuthServer | [When|*] /^(?:|I )select "(?P<option>(?:[^"]|\\")*)" from "(?P<select>(?:[^"]|\\")*)"$/
            | Selects option in select field with specified id|name|label|value
            | Example: When I select "Bats" from "user_fears"
            | Example: And I select "Bats" from "user_fears"
            | at `Knp\FriendlyContexts\Context\MinkContext::selectOption()`

OAuthServer | [When|*] /^(?:|I )additionally select "(?P<option>(?:[^"]|\\")*)" from "(?P<select>(?:[^"]|\\")*)"$/
            | Selects additional option in select field with specified id|name|label|value
            | Example: When I additionally select "Deceased" from "parents_alive_status"
            | Example: And I additionally select "Deceased" from "parents_alive_status"
            | at `Knp\FriendlyContexts\Context\MinkContext::additionallySelectOption()`

OAuthServer | [When|*] /^(?:|I )check "(?P<option>(?:[^"]|\\")*)"$/
            | Checks checkbox with specified id|name|label|value
            | Example: When I check "Pearl Necklace" from "itemsClaimed"
            | Example: And I check "Pearl Necklace" from "itemsClaimed"
            | at `Knp\FriendlyContexts\Context\MinkContext::checkOption()`

OAuthServer | [When|*] /^(?:|I )uncheck "(?P<option>(?:[^"]|\\")*)"$/
            | Unchecks checkbox with specified id|name|label|value
            | Example: When I uncheck "Broadway Plays" from "hobbies"
            | Example: And I uncheck "Broadway Plays" from "hobbies"
            | at `Knp\FriendlyContexts\Context\MinkContext::uncheckOption()`

OAuthServer | [When|*] /^(?:|I )attach the file "(?P<path>[^"]*)" to "(?P<field>(?:[^"]|\\")*)"$/
            | Attaches file to field with specified id|name|label|value
            | Example: When I attach "bwayne_profile.png" to "profileImageUpload"
            | Example: And I attach "bwayne_profile.png" to "profileImageUpload"
            | at `Knp\FriendlyContexts\Context\MinkContext::attachFileToField()`

OAuthServer | [Then|*] /^(?:|I )should be on "(?P<page>[^"]+)"$/
            | Checks, that current page PATH is equal to specified
            | Example: Then I should be on "/"
            | Example: And I should be on "/bats"
            | Example: And I should be on "http://google.com"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertPageAddress()`

OAuthServer | [Then|*] /^(?:|I )should be on (?:|the )homepage$/
            | Checks, that current page is the homepage
            | Example: Then I should be on the homepage
            | Example: And I should be on the homepage
            | at `Knp\FriendlyContexts\Context\MinkContext::assertHomepage()`

OAuthServer | [Then|*] /^the (?i)url(?-i) should match (?P<pattern>"(?:[^"]|\\")*")$/
            | Checks, that current page PATH matches regular expression
            | Example: Then the url should match "superman is dead"
            | Example: Then the uri should match "log in"
            | Example: And the url should match "log in"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertUrlRegExp()`

OAuthServer | [Then|*] /^the response status code should be (?P<code>\d+)$/
            | Checks, that current page response status is equal to specified
            | Example: Then the response status code should be 200
            | Example: And the response status code should be 400
            | at `Knp\FriendlyContexts\Context\MinkContext::assertResponseStatus()`

OAuthServer | [Then|*] /^the response status code should not be (?P<code>\d+)$/
            | Checks, that current page response status is not equal to specified
            | Example: Then the response status code should not be 501
            | Example: And the response status code should not be 404
            | at `Knp\FriendlyContexts\Context\MinkContext::assertResponseStatusIsNot()`

OAuthServer | [Then|*] /^(?:|I )should see "(?P<text>(?:[^"]|\\")*)"$/
            | Checks, that page contains specified text
            | Example: Then I should see "Who is the Batman?"
            | Example: And I should see "Who is the Batman?"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertPageContainsText()`

OAuthServer | [Then|*] /^(?:|I )should not see "(?P<text>(?:[^"]|\\")*)"$/
            | Checks, that page doesn't contain specified text
            | Example: Then I should not see "Batman is Bruce Wayne"
            | Example: And I should not see "Batman is Bruce Wayne"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertPageNotContainsText()`

OAuthServer | [Then|*] /^(?:|I )should see text matching (?P<pattern>"(?:[^"]|\\")*")$/
            | Checks, that page contains text matching specified pattern
            | Example: Then I should see text matching "Batman, the vigilante"
            | Example: And I should not see "Batman, the vigilante"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertPageMatchesText()`

OAuthServer | [Then|*] /^(?:|I )should not see text matching (?P<pattern>"(?:[^"]|\\")*")$/
            | Checks, that page doesn't contain text matching specified pattern
            | Example: Then I should see text matching "Bruce Wayne, the vigilante"
            | Example: And I should not see "Bruce Wayne, the vigilante"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertPageNotMatchesText()`

OAuthServer | [Then|*] /^the response should contain "(?P<text>(?:[^"]|\\")*)"$/
            | Checks, that HTML response contains specified string
            | Example: Then the response should contain "Batman is the hero Gotham deserves."
            | Example: And the response should contain "Batman is the hero Gotham deserves."
            | at `Knp\FriendlyContexts\Context\MinkContext::assertResponseContains()`

OAuthServer | [Then|*] /^the response should not contain "(?P<text>(?:[^"]|\\")*)"$/
            | Checks, that HTML response doesn't contain specified string
            | Example: Then the response should not contain "Bruce Wayne is a billionaire, play-boy, vigilante."
            | Example: And the response should not contain "Bruce Wayne is a billionaire, play-boy, vigilante."
            | at `Knp\FriendlyContexts\Context\MinkContext::assertResponseNotContains()`

OAuthServer | [Then|*] /^(?:|I )should see "(?P<text>(?:[^"]|\\")*)" in the "(?P<element>[^"]*)" element$/
            | Checks, that element with specified CSS contains specified text
            | Example: Then I should see "Batman" in the "heroes_list" element
            | Example: And I should see "Batman" in the "heroes_list" element
            | at `Knp\FriendlyContexts\Context\MinkContext::assertElementContainsText()`

OAuthServer | [Then|*] /^(?:|I )should not see "(?P<text>(?:[^"]|\\")*)" in the "(?P<element>[^"]*)" element$/
            | Checks, that element with specified CSS doesn't contain specified text
            | Example: Then I should not see "Bruce Wayne" in the "heroes_alter_egos" element
            | Example: And I should not see "Bruce Wayne" in the "heroes_alter_egos" element
            | at `Knp\FriendlyContexts\Context\MinkContext::assertElementNotContainsText()`

OAuthServer | [Then|*] /^the "(?P<element>[^"]*)" element should contain "(?P<value>(?:[^"]|\\")*)"$/
            | Checks, that element with specified CSS contains specified HTML
            | Example: Then the "body" element should contain "style=\"color:black;\""
            | Example: And the "body" element should contain "style=\"color:black;\""
            | at `Knp\FriendlyContexts\Context\MinkContext::assertElementContains()`

OAuthServer | [Then|*] /^the "(?P<element>[^"]*)" element should not contain "(?P<value>(?:[^"]|\\")*)"$/
            | Checks, that element with specified CSS doesn't contain specified HTML
            | Example: Then the "body" element should not contain "style=\"color:black;\""
            | Example: And the "body" element should not contain "style=\"color:black;\""
            | at `Knp\FriendlyContexts\Context\MinkContext::assertElementNotContains()`

OAuthServer | [Then|*] /^(?:|I )should see an? "(?P<element>[^"]*)" element$/
            | Checks, that element with specified CSS exists on page
            | Example: Then I should see a "body" element
            | Example: And I should see a "body" element
            | at `Knp\FriendlyContexts\Context\MinkContext::assertElementOnPage()`

OAuthServer | [Then|*] /^(?:|I )should not see an? "(?P<element>[^"]*)" element$/
            | Checks, that element with specified CSS doesn't exist on page
            | Example: Then I should not see a "canvas" element
            | Example: And I should not see a "canvas" element
            | at `Knp\FriendlyContexts\Context\MinkContext::assertElementNotOnPage()`

OAuthServer | [Then|*] /^the "(?P<field>(?:[^"]|\\")*)" field should contain "(?P<value>(?:[^"]|\\")*)"$/
            | Checks, that form field with specified id|name|label|value has specified value
            | Example: Then the "username" field should contain "bwayne"
            | Example: And the "username" field should contain "bwayne"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertFieldContains()`

OAuthServer | [Then|*] /^the "(?P<field>(?:[^"]|\\")*)" field should not contain "(?P<value>(?:[^"]|\\")*)"$/
            | Checks, that form field with specified id|name|label|value doesn't have specified value
            | Example: Then the "username" field should not contain "batman"
            | Example: And the "username" field should not contain "batman"
            | at `Knp\FriendlyContexts\Context\MinkContext::assertFieldNotContains()`

OAuthServer | [Then|*] /^(?:|I )should see (?P<num>\d+) "(?P<element>[^"]*)" elements?$/
            | Checks, that (?P<num>\d+) CSS elements exist on the page
            | Example: Then I should see 5 "div" elements
            | Example: And I should see 5 "div" elements
            | at `Knp\FriendlyContexts\Context\MinkContext::assertNumElements()`

OAuthServer | [Then|*] /^the "(?P<checkbox>(?:[^"]|\\")*)" checkbox should be checked$/
            | Checks, that checkbox with specified in|name|label|value is checked
            | Example: Then the "remember_me" checkbox should be checked
            | Example: And the "remember_me" checkbox is checked
            | at `Knp\FriendlyContexts\Context\MinkContext::assertCheckboxChecked()`

OAuthServer | [Then|*] /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" (?:is|should be) checked$/
            | Checks, that checkbox with specified in|name|label|value is checked
            | Example: Then the "remember_me" checkbox should be checked
            | Example: And the "remember_me" checkbox is checked
            | at `Knp\FriendlyContexts\Context\MinkContext::assertCheckboxChecked()`

OAuthServer | [Then|*] /^the "(?P<checkbox>(?:[^"]|\\")*)" checkbox should not be checked$/
            | Checks, that checkbox with specified in|name|label|value is unchecked
            | Example: Then the "newsletter" checkbox should be unchecked
            | Example: Then the "newsletter" checkbox should not be checked
            | Example: And the "newsletter" checkbox is unchecked
            | at `Knp\FriendlyContexts\Context\MinkContext::assertCheckboxNotChecked()`

OAuthServer | [Then|*] /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" should (?:be unchecked|not be checked)$/
            | Checks, that checkbox with specified in|name|label|value is unchecked
            | Example: Then the "newsletter" checkbox should be unchecked
            | Example: Then the "newsletter" checkbox should not be checked
            | Example: And the "newsletter" checkbox is unchecked
            | at `Knp\FriendlyContexts\Context\MinkContext::assertCheckboxNotChecked()`

OAuthServer | [Then|*] /^the checkbox "(?P<checkbox>(?:[^"]|\\")*)" is (?:unchecked|not checked)$/
            | Checks, that checkbox with specified in|name|label|value is unchecked
            | Example: Then the "newsletter" checkbox should be unchecked
            | Example: Then the "newsletter" checkbox should not be checked
            | Example: And the "newsletter" checkbox is unchecked
            | at `Knp\FriendlyContexts\Context\MinkContext::assertCheckboxNotChecked()`

OAuthServer | [Then|*] /^print current URL$/
            | Prints current URL to console.
            | Example: Then print current URL
            | Example: And print current URL
            | at `Knp\FriendlyContexts\Context\MinkContext::printCurrentUrl()`

OAuthServer | [Then|*] /^print last response$/
            | Prints last response to console
            | Example: Then print current response
            | Example: And print current response
            | at `Knp\FriendlyContexts\Context\MinkContext::printLastResponse()`

OAuthServer | [Then|*] /^show last response$/
            | Opens last response content in browser
            | Example: Then show last response
            | Example: And show last response
            | at `Knp\FriendlyContexts\Context\MinkContext::showLastResponse()`

OAuthServer | [Then|*] /^I should see a table with "([^"]*)" in the "([^"]*)" column$/
            | at `Knp\FriendlyContexts\Context\TableContext::iShouldSeeATableWithInTheNamedColumn()`

OAuthServer | [Given|*] /^I should see the following table:?$/
            | at `Knp\FriendlyContexts\Context\TableContext::iShouldSeeTheFollowingTable()`

OAuthServer | [Then|*] /^I should see the following table portion:?$/
            | at `Knp\FriendlyContexts\Context\TableContext::iShouldSeeTheFollowingTablePortion()`

OAuthServer | [Then|*] /^I should see a table with ([^"]*) rows$/
            | at `Knp\FriendlyContexts\Context\TableContext::iShouldSeeATableWithRows()`

OAuthServer | [Then|*] /^I should see a table with ([^"]*) row$/
            | at `Knp\FriendlyContexts\Context\TableContext::iShouldSeeATableWithRows()`

OAuthServer | [Then|*] /^I should see a table$/
            | at `Knp\FriendlyContexts\Context\TableContext::iShouldSeeATable()`

OAuthServer | [Given|*] /^the following ([\w ]+):?$/
            | at `Knp\FriendlyContexts\Context\EntityContext::theFollowing()`

OAuthServer | [Given|*] /^there (?:is|are) (\d+) ((?!\w* like)\w*)$/
            | at `Knp\FriendlyContexts\Context\EntityContext::thereIs()`

OAuthServer | [Given|*] /^there (?:is|are) (\d+) (.*) like:?$/
            | at `Knp\FriendlyContexts\Context\EntityContext::thereIsLikeFollowing()`

OAuthServer | [Given|*] /^(\w+) (.+) should have been (created|deleted)$/
            | at `Knp\FriendlyContexts\Context\EntityContext::entitiesShouldHaveBeen()`

OAuthServer | [Then|*] /^should be (\d+) (.*) like:?$/
            | at `Knp\FriendlyContexts\Context\EntityContext::existLikeFollowing()`

OAuthServer | [Given|*] /^I prepare a (?<method>[A-Za-z]+) request on "(?<page>[^"].*)?"$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iPrepareRequest()`

OAuthServer | [Given|*] /^I prepare a (?<method>[A-Za-z]+) request on the (.*) (?<hasPage>page|resource)$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iPrepareRequest()`

OAuthServer | [Given|*] /^I prepare a (?<method>[A-Za-z]+) request on the (.*) (?<hasPage>page|resource) with:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iPrepareRequest()`

OAuthServer | [Given|*] /^I specified the following request http (?<scheme>[a-z]+) credentials:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedTheFollowingHttpAuthentication()`

OAuthServer | [Given|*] /^I specified the following request oauth credentials:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedTheFollowingOauthCredentials()`

OAuthServer | [Given|*] /^I specified the following request headers:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedHeaders()`

OAuthServer | [Given|*] /^I specified the following request queries:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedQueries()`

OAuthServer | [Given|*] /^I specified the following request body:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedTheBody()`

OAuthServer | [Given|*] /^I specified the following request data:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedData()`

OAuthServer | [Given|*] /^I specified the following request files:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedFiles()`

OAuthServer | [Given|*] /^I specified the following request cookies:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedCookies()`

OAuthServer | [Given|*] /^I specified the following request options:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSpecifiedOptions()`

OAuthServer | [When|*] /^I send the request$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iSendTheRequest()`

OAuthServer | [Then|*] /^I should receive a (?<httpCode>[0-9]+) response$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iShouldReceiveResponse()`

OAuthServer | [Then|*] /^I should receive a (?<httpCode>[0-9]+) (?<shortType>[a-zA-Z]+) response$/
            | at `Knp\FriendlyContexts\Context\ApiContext::iShouldReceiveResponse()`

OAuthServer | [Then|*] /^the response should contains? the following headers:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::theResponseShouldContainsHeaders()`

OAuthServer | [Then|*] /^the response should contains? the following json:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::theResponsShouldContainsJson()`

OAuthServer | [Then|*] /^the response should contains?:?$/
            | at `Knp\FriendlyContexts\Context\ApiContext::theResponseShouldContains()`

OAuthServer | [Then|*] the response should be in JSON
            | Checks, that the response is correct JSON
            | at `Sanpi\Behatch\Context\JsonContext::theResponseShouldBeInJson()`

OAuthServer | [Then|*] the response should not be in JSON
            | Checks, that the response is not correct JSON
            | at `Sanpi\Behatch\Context\JsonContext::theResponseShouldNotBeInJson()`

OAuthServer | [Then|*] the JSON node :node should be equal to :text
            | Checks, that given JSON node is equal to given value
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldBeEqualTo()`

OAuthServer | [Then|*] the JSON nodes should be equal to:
            | Checks, that given JSON nodes are equal to givens values
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodesShoudBeEqualTo()`

OAuthServer | [Then|*] the JSON node :node should be null
            | Checks, that given JSON node is null
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldBeNull()`

OAuthServer | [Then|*] the JSON node :node should be true
            | Checks, that given JSON node is true
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldBeTrue()`

OAuthServer | [Then|*] the JSON node :node should be false
            | Checks, that given JSON node is false
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldBeFalse()`

OAuthServer | [Then|*] the JSON node :node should be equal to the string :text
            | Checks, that given JSON node is equal to the given string
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldBeEqualToTheString()`

OAuthServer | [Then|*] the JSON node :node should be equal to the number :number
            | Checks, that given JSON node is equal to the given number
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldBeEqualToTheNumber()`

OAuthServer | [Then|*] the JSON node :node should have :count element(s)
            | Checks, that given JSON node has N element(s)
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldHaveElements()`

OAuthServer | [Then|*] the JSON node :node should contain :text
            | Checks, that given JSON node contains given value
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldContain()`

OAuthServer | [Then|*] the JSON nodes should contain:
            | Checks, that given JSON nodes contains values
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodesShoudContain()`

OAuthServer | [Then|*] the JSON node :node should not contain :text
            | Checks, that given JSON node does not contain given value
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldNotContain()`

OAuthServer | [Then|*] the JSON nodes should not contain:
            | Checks, that given JSON nodes does not contain given value
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodesShoudNotContain()`

OAuthServer | [Given|*] the JSON node :name should exist
            | Checks, that given JSON node exist
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldExist()`

OAuthServer | [Given|*] the JSON node :name should not exist
            | Checks, that given JSON node does not exist
            | at `Sanpi\Behatch\Context\JsonContext::theJsonNodeShouldNotExist()`

OAuthServer | [Then|*] the JSON should be valid according to this schema:
            | at `Sanpi\Behatch\Context\JsonContext::theJsonShouldBeValidAccordingToThisSchema()`

OAuthServer | [Then|*] the JSON should be valid according to the schema :filename
            | at `Sanpi\Behatch\Context\JsonContext::theJsonShouldBeValidAccordingToTheSchema()`

OAuthServer | [Then|*] the JSON should be equal to:
            | at `Sanpi\Behatch\Context\JsonContext::theJsonShouldBeEqualTo()`

OAuthServer | [Then|*] print last JSON response
            | at `Sanpi\Behatch\Context\JsonContext::printLastJsonResponse()`

